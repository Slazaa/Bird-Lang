import std::memory::allocator::{Allocator, DefaultAlloc}
import std::memory::size_of;

pub struct Array<T, A: Allocator = DefaultAlloc>
{
	buffer: *mut T,
	size: uint
}

impl Array<T, A>
{
	pub func new(size: uint) -> Self
	{
		var array: Self = Self
		{
			buffer: null,
			size
		}

		var allocator: Allocator = A::new()
		array.buffer = allocator.allocate(size_of<T>() * array.size)

		return array
	}
}