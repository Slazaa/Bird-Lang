import bird::memory::{self, allocator::{Allocator, BirdAlloc}}

pub struct Array<T, A: Allocator = BirdAlloc>
{
	pointer: *mut T
	length: uint
}

impl Array<T, A>
{
	pub func new(length: uint) -> Self
	{
		return Array
		{
			pointer: A::alloc(sizeof<T>() * length),
			length: length
		}
	}

	pub func len(*self) -> uint
	{
		return self.length
	}
}

impl Drop for Array<T, A>
{
	pub func drop(*mut self)
	{
		A::free(self.pointer)
	}
}